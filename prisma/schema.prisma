// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  ASSISTANT
  APPLICANT
  BLACKLIST
}

model ClassUser {
  u_id         BigInt
  c_id         BigInt
  nickname     String       @db.VarChar(50)
  is_favorite  Boolean      @default(false)

  role         Role         @default(USER)
  materials    Material[]
  prompts      Prompt[]
  class_user_quizs ClassUserQuiz[]
  quizFeedbacks QuizFeedback[]
  quizBanks    QuizBank[]


  @@id([u_id, c_id])
}

model Material {
  id          BigInt        @id @default(autoincrement())
  file        File?
  setQuizs    SetQuiz?
  name        String        @db.VarChar(100)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  
  prompts     Prompt[]
  quizs       Quiz[]

  u_id        BigInt?
  c_id        BigInt
  class_user  ClassUser?    @relation(fields: [u_id, c_id], references: [u_id, c_id])
}

model File {
  m_path      String
  v_path      String

  refers      Refer[]
  feedbacks   FileFeedback[]

  f_id        BigInt        @id
  material    Material      @relation(fields: [f_id], references: [id], onDelete: Cascade)
}

model Refer {
  id          BigInt        @id @default(autoincrement())
  page        Int
  content     String
  created_at  DateTime      @default(now())

  f_id        BigInt
  file        File          @relation(fields: [f_id], references: [f_id], onDelete: Cascade)
  
  p_id        BigInt
  prompt      Prompt        @relation(fields: [p_id], references: [id], onDelete: Cascade)
}

model FileFeedback {
  id          BigInt        @id @default(autoincrement())
  content     String
  created_at  DateTime?     @default(now())
  f_id        BigInt

  file        File          @relation(fields: [f_id], references: [f_id], onDelete: Cascade)
}

model Prompt {
  id          BigInt        @id @default(autoincrement())
  usage       BigInt        @default(0)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  messages    Message[]
  refers      Refer[]

  m_id        BigInt
  material    Material      @relation(fields: [m_id], references: [id], onDelete: Cascade)

  u_id        BigInt
  c_id        BigInt
  class_user  ClassUser     @relation(fields: [u_id, c_id], references: [u_id, c_id], onDelete: Cascade)
}

model Message {
  id          BigInt        @id @default(autoincrement())
  question    String
  answer      String
  created_at  DateTime      @default(now())
  is_save     Boolean       @default(false)
  
  p_id        BigInt
  prompt      Prompt        @relation(fields: [p_id], references: [id], onDelete: Cascade)
}

model Quiz {
  id          BigInt        @id @default(autoincrement())
  content     Json
  created_at  DateTime      @default(now())

  quizLists             QuizList[]

  m_id        BigInt
  material    Material      @relation(fields: [m_id], references: [id], onDelete: Cascade)
}

model ClassUserQuiz {
  result      Boolean?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  u_id        BigInt
  c_id        BigInt
  class_user  ClassUser     @relation(fields: [u_id, c_id], references: [u_id, c_id], onDelete: Cascade)

  q_id        BigInt
  s_id        BigInt
  quizList    QuizList      @relation(fields: [q_id, s_id], references: [q_id, s_id], onDelete: Cascade)
  
  @@id([u_id, c_id, q_id, s_id])
}

model SetQuiz {
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  deadline    DateTime

  quizFeedbacks        QuizFeedback[]

  quizLists            QuizList[]

  m_id        BigInt        @id
  material    Material      @relation(fields: [m_id], references: [id], onDelete: Cascade)
}

model QuizFeedback {
  content     String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  u_id        BigInt
  c_id        BigInt
  class_user  ClassUser     @relation(fields: [u_id, c_id], references: [u_id, c_id], onDelete: Cascade)

  s_id        BigInt
  setQuiz     SetQuiz       @relation(fields: [s_id], references: [m_id], onDelete: Cascade)

  @@id([u_id, c_id, s_id])
}

model QuizList {
  classUserQuizs ClassUserQuiz[]

  q_id        BigInt
  quiz        Quiz      @relation(fields: [q_id], references: [id], onDelete: Cascade)

  s_id        BigInt
  setQuiz     SetQuiz   @relation(fields: [s_id], references: [m_id], onDelete: Cascade)

  @@id([q_id, s_id])
}

model QuizBank {
  id          BigInt        @id @default(autoincrement())
  title       String
  content     Json
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  u_id        BigInt
  c_id        BigInt
  class_user  ClassUser     @relation(fields: [u_id, c_id], references: [u_id, c_id], onDelete: Cascade)
}